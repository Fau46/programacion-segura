openapi: 3.0.1
info:
  title: Service 
  description: Service REST API
  version: "0.1"
servers:
- url: /
paths:
  /check_credentials:
    get:
      summary: Check user credentials
      operationId: app.check_credentials
      parameters:
        - in: query
          name: username
          required: true
          schema:
            type: string
        - in: query
          name: password
          required: true
          schema:
            type: string
      responses:
        200:
          description: Check OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUser'
        400:
          description: Wrong credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /check_auth_token:
    get:
      summary: Check user auth token
      operationId: app.check_auth_token
      parameters:
        - in: header
          name: Auth-Token
          required: true
          schema:
            type: string
      responses:
        200:
          description: Check OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUser'
        401:
          description: Invalid Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /electors:
    post:
      summary: New elector
      operationId: app.new_elector
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteElector'
      responses:
        201:
          description: Elector added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadElector'
        401:
          description: Invalid Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /electors/{dni}:
    get:
      summary: Elector's Info
      operationId: app.get_elector
      parameters:
        - in: path
          name: dni
          required: true
          schema:
            type: string
      responses:
        200:
          description: Elector's Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadElector'
        401:
          description: Invalid Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: An error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    post:
      summary: New user
      operationId: app.new_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteUser'
      responses:
        201:
          description: User added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUser'
        500:
          description: An error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{dni}:
    get:
      summary: User's Info
      operationId: app.get_user
      parameters:
        - in: path
          name: dni
          required: true
          schema:
            type: string
      responses:
        200:
          description: Users' Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUser'
        401:
          description: Invalid Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: An error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
  /users/{dni}/vote:
    put:
      summary: Modify user's ability to vote
      operationId: app.can_vote
      parameters:
        - in: header
          name: Auth-Token
          required: true
          schema:
            type: string
        - in: path
          name: dni
          required: true
          schema:
            type: string
        - in: query
          name: allowed
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: OK Changed
        401:
          description: Invalid Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Elector Not Found
        500:
          description: An error occured
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        type:
          type: string
          description: Error type
          example: about:blank
        title:
          type: string
          description: Error name
          example: Bad Request
        status:
          type: integer
          description: Error status code
          example: about:blank
        detail:
          type: string
          description: Error description
          example: None is not of type 'string'
    ReadElector:
      type: object
      properties:
        dni:
          minLength: 1
          type: string
          description: Elector's DNI
          example: "1234567890"
        firstname:
          minLength: 1
          type: string
          description: Elector's firstname
          example: "Giuseppe"
        lastname:
          minLength: 1
          type: string
          description: Elector's lastname
          example: "Garibaldi"
        dateofbirth:
          type: string
          description: Elector's date of birth
          example: "1960-11-10T10:30:00+1:00"
        can_vote:
          example: true
          type: boolean
        id:
          minLength: 1
          type: string
          description: Elector ID
          example: "1234567890"
    WriteElector:
      type: object
      required:
        - dni
        - firstname
        - lastname
        - dateofbirth
      properties:
        dni:
          minLength: 1
          type: string
          description: Elector's DNI
          example: "1234567890"
        firstname:
          minLength: 1
          type: string
          description: Elector's firstname
          example: "Giuseppe"
        lastname:
          minLength: 1
          type: string
          description: Elector's lastname
          example: "Garibaldi"
        dateofbirth:
          type: string
          format: date-time
          description: Elector's date of birth
          example: "1960-11-10T10:30:00+1:00"
    WriteUser:
      type: object
      required:
        - username
        - password
        - dni
      properties:
        username:
          minLength: 1
          type: string
          description: User's firstname
          example: "Giuseppe"
        password:
          minLength: 1
          type: string
          description: User's password
          example: "Garibaldi"
        dni:
          minLength: 1
          type: string
          description: Elector's DNI
          example: "1234567890"
    ReadUser:
      type: object
      properties:
        username:
          minLength: 1
          type: string
          description: User's firstname
          example: "Giuseppe"
        password:
          minLength: 1
          type: string
          description: User's password
          example: "Garibaldi"
        dni:
          minLength: 1
          type: string
          description: Elector's DNI
          example: "1234567890"
        id:
          minLength: 1
          type: string
          description: User ID
          example: "1234567890"
        elector_id:
          minLength: 1
          type: string
          description: Elector's ID
          example: "1234567890"
        is_admin:
          type: boolean
          description: User is an Admin
          example: false
        